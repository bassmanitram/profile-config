name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-package:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Test package import
      run: |
        python -c "import profile_config; print('Package imported successfully')"
        python -c "from profile_config import ProfileConfigResolver; print('Main class imported successfully')"

  publish:
    needs: [build, test-package]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing - no API token needed
        # Configure at https://pypi.org/manage/account/publishing/
        # Owner: bassmanitram
        # Repository: profile-config
        # Workflow: release.yml
        # Environment: release
        verbose: true

  create-release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        # Save changelog to file
        echo "## Changes in v$VERSION" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.changelog.outputs.version }}
        body_path: changelog.md
        draft: false
        prerelease: false